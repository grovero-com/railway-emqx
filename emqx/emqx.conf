## NOTE:
## This config file overrides data/configs/cluster.hocon,
## and is merged with environment variables which start with 'EMQX_' prefix.
##
## Config changes made from EMQX dashboard UI, management HTTP API, or CLI
## are stored in data/configs/cluster.hocon.
## To avoid confusion, please do not store the same configs in both files.
##
## See https://www.emqx.io/docs/en/latest/configuration/configuration.html for more details.
## Configuration full example can be found in etc/examples

node {
  name = "emqx@127.0.0.1"
  cookie = "emqxsecretcookie"
  data_dir = "data"
}

cluster {
  name = emqxcl
  discovery_strategy = manual
}

## EMQX provides support for two primary log handlers: `file` and `console`, with an additional `audit` handler specifically designed to always direct logs to files.
## The system's default log handling behavior can be configured via the environment variable `EMQX_DEFAULT_LOG_HANDLER`, which accepts the following settings:
##
##   - `file`: Directs log output exclusively to files.
##   - `console`: Channels log output solely to the console.
##
## It's noteworthy that `EMQX_DEFAULT_LOG_HANDLER` is set to `file` when EMQX is initiated via systemd `emqx.service` file.
## In scenarios outside systemd initiation, `console` serves as the default log handler.

## Read more about configs here: https://www.emqx.io/docs/en/latest/configuration/logs.html

log {
    # file {
    #     level = warning
    # }
    # console {
    #     level = warning
    # }
}
dashboard {
    listeners.http {
        bind = 18083
        inet6 = true
        proxy_header = false
    }
}

listeners {
  tcp.default.bind = "[::]:1883"
  ssl.default.bind = "[::]:8883"
  wss.default.bind = "[::]:8084"
  ws.default.bind  = "[::]:8083"
}

## System Topic
## Publishing client lifecycle events to "$SYS" topics

sys_topics {
    ## Time interval of publishing `$SYS` messages
    sys_msg_interval = 1m

    ## Time interval for publishing following heartbeat messages:
    ##   - `$SYS/brokers/<node>/uptime`
    ##   - `$SYS/brokers/<node>/datetime`
    sys_heartbeat_interval = 30s

    ## Client events messages toggle
    sys_event_messages = {
        client_connected = true
        client_disconnected = true
        client_subscribed = true
        client_unsubscribed = false
    }
}

actions {
  http {
    supabase_messages_WH_D {
      connector = supabase_messages_WH_D
      enable = true
      parameters {
        headers {
          accept = "application/json"
          cache-control = "no-cache"
          connection = "keep-alive"
          content-type = "application/json"
          keep-alive = "timeout=5"
        }
        max_retries = 2
        method = post
      }
      tags = ["supabase"]
    }
  }
}
connectors {
  http {
    supabase_messages_WH_D {
      enable = true
      enable_pipelining = 100
      headers {
        Authorization = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ewogICJyb2xlIjogImFub24iLAogICJpc3MiOiAic3VwYWJhc2UiLAogICJpYXQiOiAxNzIwMzg5NjAwLAogICJleHAiOiAxODc4MTU2MDAwCn0.gigrGedq9PfAZuzYjgLJKjtZV65oYoAYGBjZGqPVdtc"
        apikey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.ewogICJyb2xlIjogImFub24iLAogICJpc3MiOiAic3VwYWJhc2UiLAogICJpYXQiOiAxNzIwMzg5NjAwLAogICJleHAiOiAxODc4MTU2MDAwCn0.gigrGedq9PfAZuzYjgLJKjtZV65oYoAYGBjZGqPVdtc"
        content-type = "application/json"
      }
      tags = ["supabase"]
      url = "http://localhost:8000/rest/v1/rpc/push_sensor_data"
    }
  }
}
rule_engine {
  ignore_sys_message = true
  jq_function_default_timeout = "10s"
  rules {
    supabase_messages_WH_D {
      actions = [
        "http:supabase_messages_WH_D"
      ]
      description = "Push messages to Supabase database."
      metadata {created_at = 1720477333158}
      sql = """~
        SELECT
          *
        FROM
          "+/sensors",
          "+/alert"~"""
    }
  }
}
